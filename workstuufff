# First, let's create a function to map portfolios and metrics
def map_portfolio(portfolio_value, portfolio_map):
    """Map portfolio using the product_map_list"""
    for key, value in portfolio_map.items():
        if portfolio_value in value:
            return key
    return portfolio_value  # Return original if no mapping found

def map_metric(metric_value, metric_map):
    """Map metric using the metric_map_list"""
    for key, value in metric_map.items():
        if metric_value == value:
            return key
    return metric_value  # Return original if no mapping found

# Create a function to fill quarters with regular data
def fill_quarter_data(template_df, source_df, quarter_col, portfolio_map, metric_map):
    """Fill template with data from source dataframe"""
    template_copy = template_df.copy()
    
    for idx, row in template_copy.iterrows():
        template_portfolio = row['Asset Class/Product Type']
        template_metric = row['Metric']
        
        # Map the portfolio and metric
        mapped_portfolio = map_portfolio(template_portfolio, portfolio_map)
        mapped_metric = map_metric(template_metric, metric_map)
        
        # Find matching row in source dataframe
        mask = (source_df['Portfolio'] == mapped_portfolio) & (source_df['Metric'] == mapped_metric)
        matching_rows = source_df[mask]
        
        if not matching_rows.empty:
            # Use the first matching row's Q1 2024 value (adjust column name as needed)
            value = matching_rows.iloc[0]['Q1 2024']  # Adjust column name based on your data
            template_copy.at[idx, quarter_col] = value
    
    return template_copy

# Fill regular quarters (SY0Q1, SY0Q3, SY0Q4)
template = fill_quarter_data(template, df2024q1, 'SY0 Q1', product_map_list, metric_map_list)
template = fill_quarter_data(template, df2024q3, 'SY0 Q3', product_map_list, metric_map_list)
template = fill_quarter_data(template, df2024q4, 'SY0 Q4', product_map_list, metric_map_list)

# Special handling for SY0Q2 - Provision for Credit Losses
def fill_provision_quarter2(template_df, df_current, df_previous, quarter_col, portfolio_map, metric_map):
    """Special handling for Provision for Credit Losses in Q2"""
    template_copy = template_df.copy()
    
    for idx, row in template_copy.iterrows():
        template_portfolio = row['Asset Class/Product Type']
        template_metric = row['Metric']
        
        # Check if this is a Provision for Credit Losses metric
        if 'Provision for Credit Losses' in template_metric:
            # Determine if it's S1 or S2
            if '(S1)' in template_metric:
                target_metric = 'Stage 1 ECL / ACL Individually Assessed'
            elif '(S2)' in template_metric:
                target_metric = 'Stage 2 ECL / ACL Collectively Assessed for Insignificant Impaired Assets'
            else:
                continue
            
            # Map portfolio
            mapped_portfolio = map_portfolio(template_portfolio, portfolio_map)
            
            # Find values in both dataframes
            mask = (df_current['Portfolio'] == mapped_portfolio) & (df_current['Metric'] == target_metric)
            current_rows = df_current[mask]
            
            mask_prev = (df_previous['Portfolio'] == mapped_portfolio) & (df_previous['Metric'] == target_metric)
            previous_rows = df_previous[mask_prev]
            
            if not current_rows.empty and not previous_rows.empty:
                current_value = current_rows.iloc[0]['Q1 2024']  # Adjust column name
                previous_value = previous_rows.iloc[0]['Q1 2024']  # Adjust column name
                
                # Calculate difference
                difference = current_value - previous_value
                template_copy.at[idx, quarter_col] = difference
        else:
            # For non-provision metrics, use regular mapping
            mapped_portfolio = map_portfolio(template_portfolio, portfolio_map)
            mapped_metric = map_metric(template_metric, metric_map)
            
            mask = (df_current['Portfolio'] == mapped_portfolio) & (df_current['Metric'] == mapped_metric)
            matching_rows = df_current[mask]
            
            if not matching_rows.empty:
                value = matching_rows.iloc[0]['Q1 2024']  # Adjust column name
                template_copy.at[idx, quarter_col] = value
    
    return template_copy

# Fill SY0Q2 with special logic
template = fill_provision_quarter2(template, df2024q2, df2024q1, 'SY0 Q2', product_map_list, metric_map_list)

# For SY0Q3 Provision for Credit Losses (using Q3 - Q2 difference)
template = fill_provision_quarter2(template, df2024q3, df2024q2, 'SY0 Q3', product_map_list, metric_map_list)

# Display the result
print("Template filled with quarterly data:")
template.head(20)
