# First, let's create mapping dataframes from your dictionaries
def create_portfolio_mapping_df(product_map_list):
    """Convert product_map_list to a mapping dataframe"""
    mapping_data = []
    for key, values in product_map_list.items():
        for value in values:
            mapping_data.append({'template_portfolio': value, 'source_portfolio': key})
    return pd.DataFrame(mapping_data)

def create_metric_mapping_df(metric_map_list):
    """Convert metric_map_list to a mapping dataframe"""
    mapping_data = []
    for key, value in metric_map_list.items():
        mapping_data.append({'template_metric': value, 'source_metric': key})
    return pd.DataFrame(mapping_data)

# Create mapping dataframes
portfolio_mapping = create_portfolio_mapping_df(product_map_list)
metric_mapping = create_metric_mapping_df(metric_map_list)

# Function to merge quarterly data
def merge_quarter_data(template_df, source_df, quarter_col, portfolio_mapping, metric_mapping):
    """Merge template with source data using mappings"""
    
    # Add mappings to template
    temp_with_mapping = template_df.merge(
        portfolio_mapping, 
        left_on='Asset Class/Product Type', 
        right_on='template_portfolio', 
        how='left'
    ).merge(
        metric_mapping,
        left_on='Metric',
        right_on='template_metric',
        how='left'
    )
    
    # Merge with source data
    merged = temp_with_mapping.merge(
        source_df[['Portfolio', 'Metric', 'Q1 2024']],  # Adjust column name as needed
        left_on=['source_portfolio', 'source_metric'],
        right_on=['Portfolio', 'Metric'],
        how='left'
    )
    
    # Update the quarter column
    template_df[quarter_col] = merged['Q1 2024']  # Adjust column name as needed
    
    return template_df

# Regular quarters - SY0Q1, SY0Q3, SY0Q4
template = merge_quarter_data(template, df2024q1, 'SY0 Q1', portfolio_mapping, metric_mapping)
template = merge_quarter_data(template, df2024q3, 'SY0 Q3', portfolio_mapping, metric_mapping)  
template = merge_quarter_data(template, df2024q4, 'SY0 Q4', portfolio_mapping, metric_mapping)

# For SY0Q2 - Special handling for Provision for Credit Losses
def merge_provision_data(template_df, df_current, df_previous, quarter_col, portfolio_mapping):
    """Special merge for Provision for Credit Losses using differences"""
    
    # Create special metric mapping for provisions
    provision_mapping = pd.DataFrame([
        {'template_metric': 'Provision for Credit Losses (S1)', 'source_metric': 'Stage 1 ECL / ACL Individually Assessed'},
        {'template_metric': 'Provision for Credit Losses (S2)', 'source_metric': 'Stage 2 ECL / ACL Collectively Assessed for Insignificant Impaired Assets'}
    ])
    
    # Get provision rows from template
    provision_mask = template_df['Metric'].str.contains('Provision for Credit Losses', na=False)
    provision_template = template_df[provision_mask].copy()
    
    if not provision_template.empty:
        # Add mappings
        provision_with_mapping = provision_template.merge(
            portfolio_mapping,
            left_on='Asset Class/Product Type',
            right_on='template_portfolio',
            how='left'
        ).merge(
            provision_mapping,
            left_on='Metric',
            right_on='template_metric',
            how='left'
        )
        
        # Merge with current quarter data
        current_data = provision_with_mapping.merge(
            df_current[['Portfolio', 'Metric', 'Q1 2024']],  # Adjust column name
            left_on=['source_portfolio', 'source_metric'],
            right_on=['Portfolio', 'Metric'],
            how='left',
            suffixes=('', '_current')
        )
        
        # Merge with previous quarter data
        final_data = current_data.merge(
            df_previous[['Portfolio', 'Metric', 'Q1 2024']],  # Adjust column name
            left_on=['source_portfolio', 'source_metric'],
            right_on=['Portfolio', 'Metric'],
            how='left',
            suffixes=('_current', '_previous')
        )
        
        # Calculate differences
        final_data['difference'] = final_data['Q1 2024_current'] - final_data['Q1 2024_previous']
        
        # Update template with differences
        for idx, row in final_data.iterrows():
            original_idx = row.name  # This should match the original template index
            template_df.at[original_idx, quarter_col] = row['difference']
    
    # For non-provision metrics, use regular merge
    non_provision_mask = ~template_df['Metric'].str.contains('Provision for Credit Losses', na=False)
    if non_provision_mask.any():
        template_df = merge_quarter_data(template_df, df_current, quarter_col, portfolio_mapping, metric_mapping)
    
    return template_df

# Fill SY0Q2 with special provision logic (Q2 - Q1)
template = merge_provision_data(template, df2024q2, df2024q1, 'SY0 Q2', portfolio_mapping)

# Update SY0Q3 for provisions with (Q3 - Q2) differences
template = merge_provision_data(template, df2024q3, df2024q2, 'SY0 Q3', portfolio_mapping)

# Display result
print("Template filled using merge operations:")
template[['Asset Class/Product Type', 'Metric', 'SY0 Q1', 'SY0 Q2', 'SY0 Q3', 'SY0 Q4']].head(10)
