def compare_columns_merge(df1, df2):
    """Compare DataFrames column by column using merge."""
    results = {}
    
    # Get all columns from both dataframes
    all_cols = set(df1.columns) | set(df2.columns)
    
    for col in all_cols:
        if col not in df1.columns or col not in df2.columns:
            results[col] = False
        else:
            # Create temp dataframes with index and column
            temp1 = df1[[col]].reset_index()
            temp2 = df2[[col]].reset_index()
            
            # Convert to string for merge comparison
            temp1[f'{col}_str'] = temp1[col].astype(str)
            temp2[f'{col}_str'] = temp2[col].astype(str)
            
            # Merge and check if all rows match
            merged = temp1.merge(temp2, on=['index', f'{col}_str'], how='outer', indicator=True)
            results[col] = len(merged[merged['_merge'] != 'both']) == 0
    
    return results

def compare_dataframes_merge(df1, df2):
    """Compare entire DataFrames using merge."""
    # Quick checks
    if df1.shape != df2.shape or list(df1.columns) != list(df2.columns):
        return False
    
    # Convert to string and add row identifiers
    df1_str = df1.astype(str).reset_index(drop=True)
    df2_str = df2.astype(str).reset_index(drop=True)
    
    df1_str['_row_id'] = range(len(df1_str))
    df2_str['_row_id'] = range(len(df2_str))
    
    # Merge and check
    merged = df1_str.merge(df2_str, on=list(df1.columns) + ['_row_id'], how='outer', indicator=True)
    return len(merged[merged['_merge'] != 'both']) == 0
