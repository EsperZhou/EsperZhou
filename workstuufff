# Create the mapping columns using map function
template_actual['Metric_Map'] = template_actual['Metric'].map(metric_map_list)
template_actual['Product_Map'] = template_actual['Asset Class/Product Type'].map(product_map_list)

# Initialize all SY0 columns with 0
template_actual['SY0 Q1'] = 0
template_actual['SY0 Q2'] = 0
template_actual['SY0 Q3'] = 0
template_actual['SY0 Q4'] = 0

# Function to merge and fill quarter data
def fill_quarter_simple(template_df, source_df, quarter_col, source_value_col='Q1 2024'):
    """Simple merge to fill quarter data"""
    # Merge on mapped values
    merged = template_df.merge(
        source_df[['Portfolio', 'Metric', source_value_col]],
        left_on=['Product_Map', 'Metric_Map'],
        right_on=['Portfolio', 'Metric'],
        how='left'
    )
    
    # Fill the quarter column where we have matches (non-null values)
    template_df.loc[merged[source_value_col].notna(), quarter_col] = merged.loc[merged[source_value_col].notna(), source_value_col]
    
    return template_df

# Fill regular quarters
template_actual = fill_quarter_simple(template_actual, df2024q1, 'SY0 Q1')
template_actual = fill_quarter_simple(template_actual, df2024q3, 'SY0 Q3')
template_actual = fill_quarter_simple(template_actual, df2024q4, 'SY0 Q4')

# Special handling for provisions in Q2 and Q3
def fill_provision_simple(template_df, df_current, df_previous, quarter_col):
    """Handle provision differences"""
    # Create provision mapping
    provision_map = {
        'Provision for Credit Losses (S1)': 'Stage 1 ECL / ACL Individually Assessed',
        'Provision for Credit Losses (S2)': 'Stage 2 ECL / ACL Collectively Assessed for Insignificant Impaired Assets'
    }
    
    # Get provision rows
    provision_mask = template_df['Metric'].str.contains('Provision for Credit Losses', na=False)
    
    for idx in template_df[provision_mask].index:
        metric = template_df.at[idx, 'Metric']
        portfolio = template_df.at[idx, 'Product_Map']
        
        if metric in provision_map and pd.notna(portfolio):
            target_metric = provision_map[metric]
            
            # Get current and previous values
            current_val = df_current[
                (df_current['Portfolio'] == portfolio) & 
                (df_current['Metric'] == target_metric)
            ]['Q1 2024'].values
            
            previous_val = df_previous[
                (df_previous['Portfolio'] == portfolio) & 
                (df_previous['Metric'] == target_metric)
            ]['Q1 2024'].values
            
            if len(current_val) > 0 and len(previous_val) > 0:
                difference = current_val[0] - previous_val[0]
                template_df.at[idx, quarter_col] = difference
    
    return template_df

# Fill Q2 and Q3 with provision logic
template_actual = fill_quarter_simple(template_actual, df2024q2, 'SY0 Q2')  # Regular metrics
template_actual = fill_provision_simple(template_actual, df2024q2, df2024q1, 'SY0 Q2')  # Provisions

# For Q3, update provisions with Q3-Q2 difference
template_actual = fill_provision_simple(template_actual, df2024q3, df2024q2, 'SY0 Q3')  # Provisions

# Check results
print("Non-zero values:")
mask = (template_actual[['SY0 Q1', 'SY0 Q2', 'SY0 Q3', 'SY0 Q4']] != 0).any(axis=1)
print(template_actual[mask][['Metric', 'Asset Class/Product Type', 'SY0 Q1', 'SY0 Q2', 'SY0 Q3', 'SY0 Q4']].head())
